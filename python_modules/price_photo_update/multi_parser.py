import requests
from bs4 import BeautifulSoup
import pandas as pd
import time
import re
import os
from datetime import datetime
import logging
import mysql.connector
from concurrent.futures import ThreadPoolExecutor, as_completed

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
OUTPUT_DIR = "/home/admin/web/233204.fornex.cloud/public_html/public/"
LOG_DIR = "/home/admin/web/233204.fornex.cloud/public_html/storage/logs/update/"
OUTPUT_FILENAME = "products.xlsx"
OUTPUT_PATH = os.path.join(OUTPUT_DIR, OUTPUT_FILENAME)
LOG_FILE = os.path.join(LOG_DIR, "parsing_log.txt")  # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è –ª–æ–≥–æ–≤

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞ –¥–ª—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã–≤–æ–¥–∞
logger = logging.getLogger()
logger.setLevel(logging.INFO)

# –§–æ—Ä–º–∞—Ç –ª–æ–≥–æ–≤
formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')

# –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ (–≤—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å)
console_handler = logging.StreamHandler()
console_handler.setFormatter(formatter)
logger.addHandler(console_handler)

# –§–∞–π–ª –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
file_handler = logging.FileHandler(LOG_FILE, encoding='utf-8')
file_handler.setFormatter(formatter)
logger.addHandler(file_handler)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç—Ä–∞–Ω–∏—Ü
def get_total_pages():
    url = 'https://trast-zapchast.ru/shop/page/1'
    headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36'}
    
    response = requests.get(url, headers=headers)
    if response.status_code != 200:
        logger.error(f'‚ùå –û—à–∏–±–∫–∞ {response.status_code} –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã 1')
        return 1  

    soup = BeautifulSoup(response.text, 'html.parser')
    pagination = soup.select('ul.page-numbers li')  
    if pagination:
        last_page = pagination[-2].get_text(strip=True)  
        return int(last_page) if last_page.isdigit() else 1
    return 1

# –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
def clean_price(price):
    return re.sub(r'[^\d]', '', price)

def clean_article(article):
    return re.sub(r'[\s\-]', '', article)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ç–æ–≤–∞—Ä–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è
def parse_product_page(product_url):
    headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36'}
    
    response = requests.get(product_url, headers=headers)
    if response.status_code != 200:
        logger.warning(f'‚ö†Ô∏è –û—à–∏–±–∫–∞ {response.status_code} –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ç–æ–≤–∞—Ä–∞: {product_url}')
        return '–ù/–î'

    soup = BeautifulSoup(response.text, 'html.parser')

    manufacturer_tag = soup.find('div', class_='wl-attr--item pa_proizvoditel')
    manufacturer_value = manufacturer_tag.find('span', class_='pa-right') if manufacturer_tag else None
    manufacturer = manufacturer_value.get_text(strip=True) if manufacturer_value else '–ù/–î'

    return manufacturer

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–∞—Ç–∞–ª–æ–≥–∞
def parse_page(page_number):
    url = f'https://trast-zapchast.ru/shop/page/{page_number}'
    headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36'}
    
    start_time = time.time()  # –ó–∞—Å–µ–∫–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    response = requests.get(url, headers=headers)
    if response.status_code != 200:
        logger.error(f'‚ùå –û—à–∏–±–∫–∞ {response.status_code} –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page_number}')
        return []

    soup = BeautifulSoup(response.text, 'html.parser')
    products = soup.find_all('div', class_='th-product-card')

    items = []
    for product in products:
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∫–ª–∞—Å—Å–∞ "outofstock" –∏–ª–∏ —ç–ª–µ–º–µ–Ω—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π —É–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ —Ç–æ–≤–∞—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
            if product.find('a', class_='button product_type_variable'):
                continue

            # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
            image_tag = product.find('div', class_='th-product-card__image').find('img')
            image_url = image_tag['src'] if image_tag else '–ù/–î'

            # –ê—Ä—Ç–∏–∫—É–ª (—á–∏—Å—Ç–∏–º –æ—Ç –ø—Ä–æ–±–µ–ª–æ–≤ –∏ —Ç–∏—Ä–µ)
            meta_tag = product.find('div', class_='th-product-card__meta')
            article_tag = meta_tag.find('span', class_='th-product-card__meta-value') if meta_tag else None
            # article = clean_article(article_tag.get_text(strip=True)) if article_tag else '–ù/–î'
            article = article_tag.get_text(strip=True) if article_tag else '–ù/–î'

            # –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ
            name_tag = product.find('div', class_='th-product-card__name').find('h2')
            name = name_tag.get_text(strip=True) if name_tag else '–ù/–î'

            # –¶–µ–Ω–∞ (—á–∏—Å—Ç–∏–º –æ—Ç —Å–∏–º–≤–æ–ª–æ–≤)
            price_tag = product.find('div', class_='th-product-card__prices').find('span', class_='woocommerce-Price-amount')
            price = clean_price(price_tag.get_text(strip=True)) if price_tag else '0'

            # –°—Å—ã–ª–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ç–æ–≤–∞—Ä–∞
            product_page_tag = product.find('a', class_='woocommerce-LoopProduct-link')
            product_page_link = product_page_tag['href'] if product_page_tag else '–ù/–î'

            # –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è
            manufacturer = parse_product_page(product_page_link) if product_page_link != '–ù/–î' else '–ù/–î'

            items.append({
                '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ': name,
                '–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å': manufacturer,
                '–ê—Ä—Ç–∏–∫—É–ª': article,
                '–¶–µ–Ω–∞': price,
                '–°—Å—ã–ª–∫–∞': product_page_link,
                '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ': image_url,
            })
            logger.info(f'‚úîÔ∏è –î–æ–±–∞–≤–ª–µ–Ω —Ç–æ–≤–∞—Ä: {name} | –ê—Ä—Ç–∏–∫—É–ª: {article} | –¶–µ–Ω–∞: {price} | –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å: {manufacturer}')
        except Exception as e:
            logger.warning(f'‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page_number}: {e}')
            continue

    end_time = time.time()  # –ó–∞—Å–µ–∫–∞–µ–º –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    elapsed_time = round(end_time - start_time, 2)
    logger.info(f'üìÑ –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–∞–Ω–∏—Ü—É {page_number}... üïí {elapsed_time} —Å–µ–∫.')

    return items
# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö MySQL
def connect_to_db():
    try:
        return mysql.connector.connect(
            host="127.0.0.1",
            user="uploader",
            password="uploader",
            database="avito"
        )
    except mysql.connector.Error as err:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {err}")
        raise
def update_config_status(db_connection, name, value):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Ç–∞–±–ª–∏—Ü–µ config.
    –ï—Å–ª–∏ –∑–∞–ø–∏—Å–∏ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º name –Ω–µ—Ç, –æ–Ω–∞ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞.
    """
    try:
        with db_connection.cursor() as cursor:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∑–∞–ø–∏—Å—å
            query_check = "SELECT COUNT(*) FROM config WHERE name = %s"
            cursor.execute(query_check, (name,))
            exists = cursor.fetchone()[0]

            if exists:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
                query_update = "UPDATE config SET value = %s WHERE name = %s"
                cursor.execute(query_update, (value, name))
            else:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
                query_insert = "INSERT INTO config (name, value) VALUES (%s, %s)"
                cursor.execute(query_insert, (name, value))

            db_connection.commit()
            logging.info(f"–°—Ç–∞—Ç—É—Å '{name}' —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –¥–æ –∑–Ω–∞—á–µ–Ω–∏—è '{value}'")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ '{name}' –≤ —Ç–∞–±–ª–∏—Ü–µ config: {e}")
        db_connection.rollback()



# –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç—å—é
def main():
        try:
            with connect_to_db() as db_connection:
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –¥–ª—è XML –∏ YML
                update_config_status(db_connection, "parser_status", "in_progress")
                os.makedirs(OUTPUT_DIR, exist_ok=True)
                
                # –ü–æ–ª–Ω–∞—è –ø–µ—Ä–µ–∑–∞–ø–∏—Å—å —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                if os.path.exists(OUTPUT_PATH):
                    os.remove(OUTPUT_PATH)
                    logger.info(f'üóë –£–¥–∞–ª—ë–Ω —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª: {OUTPUT_PATH}')

                start_time = datetime.now()  # –ó–∞—Å–µ–∫–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –≤—Å–µ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞
                logger.info(f'‚è≥ –ù–∞—á–∞–ª–æ –ø–∞—Ä—Å–∏–Ω–≥–∞: {start_time.strftime("%Y-%m-%d %H:%M:%S")}')

                total_pages = get_total_pages()
                logger.info(f'üîç –ù–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–∞–Ω–∏—Ü: {total_pages}')

                all_items = []

                # –°–æ–∑–¥–∞—ë–º –ø—É–ª –ø–æ—Ç–æ–∫–æ–≤ –¥–ª—è –º–Ω–æ–≥–æ–∑–∞–¥–∞—á–Ω–æ—Å—Ç–∏
                with ThreadPoolExecutor(max_workers=5) as executor:
                    future_to_page = {executor.submit(parse_page, page): page for page in range(1, total_pages + 1)}

                    for future in as_completed(future_to_page):
                        page_number = future_to_page[future]
                        try:
                            items = future.result()
                            all_items.extend(items)
                            logger.info(f'‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page_number} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.')
                        except Exception as e:
                            logger.warning(f'‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page_number}: {e}')

                df = pd.DataFrame(all_items, columns=['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ', '–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å', '–ê—Ä—Ç–∏–∫—É–ª', '–¶–µ–Ω–∞', '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ', '–°—Å—ã–ª–∫–∞'])

                df.to_excel(OUTPUT_PATH, sheet_name='–¢–æ–≤–∞—Ä—ã', index=False)

                end_time = datetime.now()  # –ó–∞—Å–µ–∫–∞–µ–º –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤—Å–µ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞
                elapsed_time = end_time - start_time

                logger.info(f'‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω! –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤ —Å–æ–±—Ä–∞–Ω–æ: {len(all_items)}')
                logger.info(f'üìÇ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: {OUTPUT_PATH}')
                logger.info(f'‚è≥ –ö–æ–Ω–µ—Ü –ø–∞—Ä—Å–∏–Ω–≥–∞: {end_time.strftime("%Y-%m-%d %H:%M:%S")}')
                logger.info(f'‚è± –û–±—â–µ–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {elapsed_time}')
                update_config_status(db_connection, "parser_status", "done")
                update_config_status(db_connection, "parser_update_time", datetime.now().strftime("%Y-%m-%d %H:%M:%S"))
        except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ü–µ–Ω—ã: {e}")
                update_config_status(db_connection, "parser_status", "failed")
                update_config_status(db_connection, "parser_update_time", datetime.now().strftime("%Y-%m-%d %H:%M:%S"))


# # –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if __name__ == '__main__':
    main()
