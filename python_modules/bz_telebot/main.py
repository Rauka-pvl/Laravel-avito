import asyncio
import subprocess
import os
import time
import logging
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, Router, F, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from dotenv import load_dotenv
from aiogram.enums import ParseMode
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.client.default import DefaultBotProperties
import psutil
from log_manager import get_latest_log_tail, cleanup_old_logs
import html
from database_manager import *
from user_state import set_user_state, get_user_state, clear_user_state
from scheduler import router as schedule_router, handle_schedule_time_input

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
BASE_DIR = os.path.abspath(os.path.join(os.path.dirname(__file__), ".."))
load_dotenv(os.path.join(BASE_DIR, ".env"))
API_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
ADMIN_IDS = os.getenv("TELEGRAM_USER_IDS", "").split(",")

# === –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–æ–≤ ===
SCRIPTS = {}
for item in os.listdir(BASE_DIR):
    if item in ["notification", "price_photo_update", "bz_telebot"]:
        continue
    full_path = os.path.join(BASE_DIR, item, "main.py")
    if os.path.isfile(full_path):
        SCRIPTS[item] = full_path

# === Telegram setup ===
logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())
router = Router()
dp.include_router(router)
dp.include_router(schedule_router)

# === –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ ===
def get_main_keyboard():
    keyboard = [
        [KeyboardButton(text="üìÇ –°–ª—É–∂–±—ã"), KeyboardButton(text="üìä –°—Ç–∞—Ç—É—Å")],
        [KeyboardButton(text="‚è∞ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ"), KeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å/–ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞")]
    ]
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)

@router.message(F.text == "üîÑ –û–±–Ω–æ–≤–∏—Ç—å/–ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞")
async def handle_git_pull(message: types.Message):
    repo_dir = BASE_DIR  # –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å git-—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–º
    restart_script = os.path.join(repo_dir, "bot_start.sh")  # –ü—É—Ç—å –∫ —Å–∫—Ä–∏–ø—Ç—É –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞

    try:
        # –í—ã–ø–æ–ª–Ω—è–µ–º git pull
        result = subprocess.run(
            ["git", "-C", repo_dir, "pull"],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True,
            timeout=20
        )
        output = result.stdout + result.stderr
        if not output.strip():
            output = "‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ, –Ω–æ –Ω–µ—Ç –≤—ã–≤–æ–¥–∞."

        # –ü—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç —á–µ—Ä–µ–∑ —Å–∫—Ä–∏–ø—Ç
        if os.path.exists(restart_script):
            subprocess.Popen(
                ["bash", restart_script],
                stdout=subprocess.DEVNULL,
                stderr=subprocess.DEVNULL,
                preexec_fn=os.setpgrp  # –∑–∞–ø—É—Å–∫–∞–µ–º –≤ —Ñ–æ–Ω–µ
            )
            output += "\n\nüîÅ <b>–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ <code>bot_start.sh</code> –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω.</b>"
        else:
            output += "\n\n‚ö†Ô∏è <b>–°–∫—Ä–∏–ø—Ç <code>bot_start.sh</code> –Ω–µ –Ω–∞–π–¥–µ–Ω!</b>"

        await message.reply(f"<b>–†–µ–∑—É–ª—å—Ç–∞—Ç git pull:</b>\n<pre>{html.escape(output.strip())}</pre>", parse_mode="HTML")

    except Exception as e:
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ git pull –∏–ª–∏ –∑–∞–ø—É—Å–∫–µ:\n<code>{html.escape(str(e))}</code>", parse_mode="HTML")


def get_script_keyboard(script_name):
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text=f"üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å: {script_name}"), KeyboardButton(text=f"üìÑ –õ–æ–≥: {script_name}")],
            [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    )

# === –£—Ç–∏–ª–∏—Ç—ã ===
def format_script_info(name):
    info = get_script_info(name)
    status = info['status'] or "unknown"
    start = info['start_time']
    end = info['end_time']
    duration = info['duration']

    status_emoji = {
        "running": "üü¢ –†–∞–±–æ—Ç–∞–µ—Ç",
        "done": "‚úÖ –ó–∞–≤–µ—Ä—à—ë–Ω",
        "failed": "‚ùå –û—à–∏–±–∫–∞",
        "unknown": "‚ö™ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    }.get(status, status)

    duration_text = "‚Äì"
    if duration:
        minutes = int(duration) // 60
        seconds = int(duration) % 60
        duration_text = f"{minutes} –º–∏–Ω {seconds} —Å–µ–∫" if minutes > 0 else f"{seconds} —Å–µ–∫"

    last_run_fmt = "‚Äì"
    if start:
        try:
            last_run_fmt = datetime.fromisoformat(start).strftime("%Y-%m-%d %H:%M:%S")
        except:
            pass

    tail = get_latest_log_tail(name)
    return {
        "text": f"{name}\n–ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—É—Å–∫: {last_run_fmt}\n–°—Ç–∞—Ç—É—Å: {status_emoji}\n–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {duration_text}",
        "tail": html.escape(tail) if tail else None
    }

# === –•–µ–Ω–¥–ª–µ—Ä—ã ===
@router.message(F.text == "/start")
async def show_menu(message: types.Message):
    if str(message.from_user.id) not in ADMIN_IDS:
        return await message.reply("‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
    await message.reply("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_keyboard())

@router.message(F.text == "üìÇ –°–ª—É–∂–±—ã")
async def show_scripts(message: types.Message):
    script_names = sorted(SCRIPTS.keys())
    keyboard = []
    for i in range(0, len(script_names), 2):
        row = [KeyboardButton(text=script_names[i])]
        if i + 1 < len(script_names):
            row.append(KeyboardButton(text=script_names[i + 1]))
        keyboard.append(row)
    keyboard.append([KeyboardButton(text="üîô –ù–∞–∑–∞–¥")])
    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç:", reply_markup=ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True))

@router.message(F.text == "üîô –ù–∞–∑–∞–¥")
async def go_back(message: types.Message):
    await message.reply("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_keyboard())

@router.message(F.text == "üìä –°—Ç–∞—Ç—É—Å")
async def show_status(message: types.Message):
    lines = []
    for name in SCRIPTS:
        info = format_script_info(name)
        text = info["text"]
        tail = info["tail"]
        if tail:
            text += f"\n\nüìÑ –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –ª–æ–≥–∞:\n{tail}"
        lines.append(text)
    if not lines:
        await message.reply("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å—Ç–∞—Ç—É—Å–∞—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤", reply_markup=get_main_keyboard())
    else:
        await message.reply("\n\n".join(lines), reply_markup=get_main_keyboard(), parse_mode=None)

@router.message(F.text.in_(SCRIPTS.keys()))
async def show_script_controls(message: types.Message):
    await message.reply(f"–î–µ–π—Å—Ç–≤–∏—è –¥–ª—è {message.text}:", reply_markup=get_script_keyboard(message.text))

@router.message(F.text.startswith("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å: "))
async def run_script(message: types.Message):
    script_name = message.text.replace("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å: ", "")
    script_path = SCRIPTS.get(script_name)

    if not script_path or not os.path.isfile(script_path):
        await message.reply(f"‚ùå –°–∫—Ä–∏–ø—Ç {script_name} –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: {script_path}")
        return

    await message.reply(f"‚è≥ –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞: {script_name}\nüß© –ü—É—Ç—å: {script_path}")
    logging.info(f"–ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ '{script_name}' –ø–æ –ø—É—Ç–∏: {script_path}")
    try:
        set_script_start(script_name)
        subprocess.Popen(
            ["nohup", "python3", script_path],
            stdout=subprocess.DEVNULL,
            stderr=subprocess.DEVNULL,
            preexec_fn=os.setpgrp
        )
        await message.reply(f"‚úÖ –°–∫—Ä–∏–ø—Ç {script_name} –∑–∞–ø—É—â–µ–Ω", reply_markup=get_script_keyboard(script_name))
    except Exception as e:
        logging.exception(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞ {script_name}")
        set_script_end(script_name, status="failed")
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ {script_name}: {str(e)}", reply_markup=get_script_keyboard(script_name))

@router.message(F.text.startswith("üìÑ –õ–æ–≥: "))
async def show_log_tail(message: types.Message):
    script_name = message.text.replace("üìÑ –õ–æ–≥: ", "")
    tail = get_latest_log_tail(script_name)
    reply = f"""üìÑ –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –ª–æ–≥–∞ {script_name}:
{tail}""" if tail else "–õ–æ–≥ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç."
    await message.reply(reply, reply_markup=get_script_keyboard(script_name))

# === –§–æ–Ω–æ–≤–∞—è –æ—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤ ===
def periodic_log_cleanup(interval_seconds=1800):
    async def _loop():
        while True:
            cleanup_old_logs()
            await asyncio.sleep(interval_seconds)
    return _loop()

# === –§–æ–Ω–æ–≤—ã–π –∑–∞–ø—É—Å–∫ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é (–∏–∑ config —Å cron) ===
from croniter import croniter

def get_due_schedules(now: datetime) -> list:
    result = []
    conn = connect_to_db()
    cursor = conn.cursor()
    try:
        query = "SELECT name, value FROM config WHERE name LIKE %s" if DB_TYPE == "mysql" else "SELECT name, value FROM config WHERE name LIKE ?"
        like_pattern = "%.schedule.%" if DB_TYPE == "mysql" else "%.schedule.%"
        cursor.execute(query, (like_pattern,))
        for name, cron_expr in cursor.fetchall():
            try:
                script_name = name.split(".")[0]
                base_time = now.replace(second=0, microsecond=0)
                itr = croniter(cron_expr, base_time - timedelta(minutes=1))
                next_time = itr.get_next(datetime)
                if next_time == base_time:
                    result.append({"script_name": script_name, "cron_expr": cron_expr})
            except Exception as e:
                logging.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π cron-–≤—ã—Ä–∞–∂–µ–Ω–∏–µ '{cron_expr}' –¥–ª—è '{name}': {e}")
    finally:
        cursor.close()
        conn.close()
    return result

def periodic_schedule_runner(interval_seconds=60):
    async def _loop():
        await asyncio.sleep(5)
        while True:
            now = datetime.now()
            due = get_due_schedules(now)
            for task in due:
                script_name = task["script_name"]
                script_path = SCRIPTS.get(script_name)
                if script_path and os.path.exists(script_path):
                    logging.info(f"[SCHEDULE] –ó–∞–ø—É—Å–∫ –ø–æ cron: {script_name} ({task['cron_expr']})")
                    set_script_start(script_name)
                    subprocess.Popen(
                        ["nohup", "python3", script_path],
                        stdout=subprocess.DEVNULL,
                        stderr=subprocess.DEVNULL,
                        preexec_fn=os.setpgrp
                    )
            await asyncio.sleep(interval_seconds)
    return _loop()

# === –ó–∞–ø—É—Å–∫ ===
async def main():
    init_db()
    for uid in ADMIN_IDS:
        try:
            await bot.send_message(uid.strip(), "ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω", reply_markup=get_main_keyboard())
        except Exception as e:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {uid}: {e}")
    asyncio.create_task(periodic_log_cleanup())
    asyncio.create_task(periodic_schedule_runner())
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
