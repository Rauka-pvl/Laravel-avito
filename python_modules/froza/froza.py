import requests
from lxml import etree
from io import BytesIO
import logging
import csv

# === –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è ===
LOGIN = "SIVF"
PASSWORD = "Jmb08OVg7b"

# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
import os
from datetime import datetime

# === –ü–∞–ø–∫–∞ –¥–ª—è –ª–æ–≥–æ–≤ ===
LOG_DIR = "logs"
os.makedirs(LOG_DIR, exist_ok=True)

# === –ò–º—è –ª–æ–≥-—Ñ–∞–π–ª–∞ ===
log_filename = os.path.join(
    LOG_DIR,
    f"froza_{datetime.now().strftime('%Y-%m-%d_%H-%M-%S')}.log"
)

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –∫–æ–Ω—Å–æ–ª—å + —Ñ–∞–π–ª ===
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s [%(levelname)s] %(message)s',
    handlers=[
        logging.FileHandler(log_filename, encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)


# === XML-–ø–∞—Ä—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞ –æ—Ç Froza ===
def parse_xml_response(content):
    try:
        parser = etree.XMLParser(recover=True, encoding='utf-8')
        tree = etree.parse(BytesIO(content), parser)
        root = tree.getroot()

        if root is None or not list(root):
            return []

        result = []
        for elem in root:
            item = {}
            for child in elem:
                item[child.tag] = child.text
            result.append(item)

        return result
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ XML: {e}")
        return []

# === –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∞–π—Å–∞ –æ—Ç Froza ===
def get_price_list(code: str, brand: str = "") -> list:
    for attempt in [brand, ""]:
        url = f"https://www.froza.ru/search_xml4.php?get=price_list&user={LOGIN}&password={PASSWORD}&code={code}"
        if attempt:
            url += f"&brand={attempt}"

        try:
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞ –¥–ª—è: {code} (–±—Ä–µ–Ω–¥: {attempt or '–ª—é–±–æ–π'})")
            response = requests.get(url, timeout=5)
            response.raise_for_status()
            data = parse_xml_response(response.content)
            if data:
                return data
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
    return []

# === –ü–æ–∏—Å–∫ —Å–∞–º–æ–π –¥–µ—à–µ–≤–æ–π (—Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º <=5 –¥–Ω–µ–π) ===
def select_offer(data: list, oem: str = "", brand: str = "") -> tuple:
    fast = []
    slow = []

    for item in data:
        try:
            delivery_time = int(item.get("delivery_time", 999))
            price = float(item.get("price", 9999999))
            if delivery_time <= 5:
                fast.append((price, item))
            else:
                slow.append((price, item))
        except Exception:
            continue

    if fast:
        fast.sort(key=lambda x: x[0])
        chosen = fast[0][1]
        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –±—ã—Å—Ç—Ä–∞—è –ø–æ–∑–∏—Ü–∏—è: {chosen['price']} ‚ÇΩ, –¥–æ—Å—Ç–∞–≤–∫–∞ {chosen['delivery_time']}‚Äì{chosen['delivery_time_guar']} –¥–Ω. ({brand})")
        return chosen, ""
    elif slow:
        slow.sort(key=lambda x: x[0])
        chosen = slow[0][1]
        logger.warning(f"‚ö†Ô∏è –¢–æ–ª—å–∫–æ –º–µ–¥–ª–µ–Ω–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞: {chosen['price']} ‚ÇΩ, {chosen['delivery_time']}‚Äì{chosen['delivery_time_guar']} –¥–Ω. ({brand})")
        return chosen, "–î–æ—Å—Ç–∞–≤–∫–∞ > 5 –¥–Ω–µ–π"
    else:
        logger.warning(f"‚ùó –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –¥–ª—è {oem} ({brand})")
        return None, "–ù–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π"

# === –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ XML-—Ñ–∞–π–ª–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π ===
def scan_ads_file(filepath: str) -> list:
    tree = etree.parse(filepath)
    ads = tree.xpath("//Ad")
    total = len(ads)
    logger.info(f"üîç –ù–∞–π–¥–µ–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {total}")
    
    results = []
    processed = 0
    skipped = 0

    for idx, ad in enumerate(ads, start=1):
        oem = ad.findtext("OEM")
        brand = ad.findtext("Brand")

        if oem and brand:
            logger.info(f"‚ñ∂ ({idx}/{total}) –ü–æ–∏—Å–∫ –ø–æ OEM={oem}, Brand={brand}")
            prices = get_price_list(oem, brand)
            offer, comment = select_offer(prices, oem=oem, brand=brand)
            if offer:
                results.append({
                    "–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å": brand,
                    "–ê—Ä—Ç–∏–∫—É–ª": oem,
                    "–û–ø–∏—Å–∞–Ω–∏–µ": offer.get("description_rus") or offer.get("description", ""),
                    "–¶–µ–Ω–∞": offer.get("price"),
                    "–í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏": f"{offer.get('delivery_time')}‚Äì{offer.get('delivery_time_guar')} –¥–Ω.",
                    "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π": comment
                })
            else:
                results.append({
                    "–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å": brand,
                    "–ê—Ä—Ç–∏–∫—É–ª": oem,
                    "–û–ø–∏—Å–∞–Ω–∏–µ": "",
                    "–¶–µ–Ω–∞": "",
                    "–í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏": "",
                    "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π": "–ù–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π"
                })
            processed += 1
        else:
            logger.warning(f"‚õîÔ∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ ({idx}/{total}): –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç OEM –∏–ª–∏ Brand")
            skipped += 1

    logger.info(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {processed}, ‚õî –ü—Ä–æ–ø—É—â–µ–Ω–æ: {skipped}")
    return results


# === –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ CSV ===
def save_to_csv(data: list, filename: str = "result.csv"):
    if not data:
        logger.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.")
        return
    headers = ["–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å", "–ê—Ä—Ç–∏–∫—É–ª", "–û–ø–∏—Å–∞–Ω–∏–µ", "–¶–µ–Ω–∞", "–í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏", "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"]
    with open(filename, "w", newline="", encoding="utf-8") as f:
        writer = csv.DictWriter(f, fieldnames=headers, delimiter=";")
        writer.writeheader()
        writer.writerows(data)
    logger.info(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ —Ñ–∞–π–ª: {filename}")

# === –ó–∞–ø—É—Å–∫ ===
if __name__ == "__main__":
    ads_data = scan_ads_file("avito_xml.xml")  # ‚Üê –ø—É—Ç—å –∫ XML-—Ñ–∞–π–ª—É
    save_to_csv(ads_data)
